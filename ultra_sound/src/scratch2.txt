#include <Arduino.h>
#include <WiFiClientSecure.h>
#include <SPIFFS.h>
#include "at_client.h"
#include <string>
#include "constants.h"

#include "monitor.h"
void setup() {

  // change this to the atSign you own and have the keys to
  const auto *esp32 = new AtSign("@6isolated69");
  const auto *java = new AtSign("@impossible6891");
      
  // reads the keys on the ESP32
  const auto keys = keys_reader::read_keys(*esp32); 
      
  // creates the AtClient object (allows us to run operations)
  auto *at_client = new AtClient(*esp32, keys);  

  // pkam authenticate into our atServer
  at_client->pkam_authenticate(SSID, PASSWORD);

  auto *at_key = new AtKey("test", esp32, java);
  auto *at_key2 = new AtKey("test", java, esp32);
  at_key2->namespace_str = "socrates9";

  Monitor col_system(34, 12, 5, 18, 36);
  col_system.putkey = at_key;
  col_system.getkey = at_key2;
  col_system.client = at_client;

  while (true)
  {
    cout << "Monitoring is currently ";
    cout << at_client->get_ak(*at_key2);
    cout << "." << endl;

    // Check if the value sent from Flutter Application is "active"
    if (at_client->get_ak(*at_key2) == "active")
    {
      collision_monitor(col_system);
    }
  }

}

void loop() {
  // collision_monitor() will repeatedly activate, and only finish if the Flutter
  // application clls to restart monitoring, thus a new call of collision_monitor() 
}